package ${pkg}.filter;

import ${pkg}.dao.TokenDao;
import ${pkg}.dao.UserDao;
import ${pkg}.exception.base.UnauthorizedException;
import ${pkg}.model.Token;
import ${pkg}.model.User;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import java.io.IOException;
import java.util.List;

public class AuthorizationInterceptor
		implements ContainerRequestFilter {
		
	public static final String TOKEN = "X-Access-Token";

	@Autowired
	private TokenDao tokenDao;

	@Autowired
	private UserDao userDao;

	@Override
	public void filter(ContainerRequestContext requestContext)
			throws IOException
	{
		String path = requestContext.getUriInfo().getAbsolutePath().getPath();

		if (requestContext.getMethod().toUpperCase().equals("OPTIONS")
				||!path.contains("/api/")
				|| path.contains("/login")
				|| path.contains("/register")
				|| path.contains("/findPassword")
				|| path.contains("/export")
				|| path.contains("/print")
				|| path.contains("excel"))
		{
			return;
		} else {

			String token = requestContext.getHeaderString(TOKEN);
            if(token == null || StringUtils.isEmpty(token)){
                throw new UnauthorizedException("unauthorized");
            }

            List<Token> tokens = tokenDao.getByToken(token);

            if(tokens == null || tokens.size() == 0){
                throw new UnauthorizedException("token not found");
            }
            Token tokenInfo = tokens.get(0);

            User user = userDao.get(tokenInfo.getUserId());
            if(user == null){
                throw new UnauthorizedException("invalid user");
            }

            AuthorizationManager.logonUser.set(user);
            AuthorizationManager.token.set(tokenInfo);

		}
	}
}
