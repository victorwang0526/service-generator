package ${pkg}.resource;

import ${pkg}.manager.${modelName}Manager;
import ${pkg}.model.${modelName};
import ${pkg}.sharedObject.${modelName}Create;
import ${pkg}.sharedObject.${modelName}Info;
import ${pkg}.sharedObject.${modelName}Update;
import ${pkg}.sharedObject.PaginatedAPIResult;
import ma.glasnost.orika.MapperFacade;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

/**
 * The ${modelNameL} resource
 *
 * @author victor.wang
 * @version $Id$
 */
@Component
@Path("/${modelNameL}s")
public class ${modelName}Resource
{

	@Autowired
	private ${modelName}Manager ${modelNameL}Manager;

	@Autowired
	private MapperFacade mapper;

	/**
	 * <h3>Description</h3>.
	 * <p>Get a ${modelNameL}</p>
	 *
	 * @param id The ${modelNameL} id
	 */
	@GET
	@Path("{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public ${modelName}Info get${modelName}(@PathParam("id") String id)
	{
		return mapper.map(${modelNameL}Manager.get${modelName}(id), ${modelName}Info.class);
	}

	/**
	 * <h3>Description</h3>.
	 * <p>Create a ${modelNameL}</p>
	 *
	 * @param ${modelNameL}Create the create object
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public ${modelName}Info create${modelName}(${modelName}Create ${modelNameL}Create)
	{
		return mapper.map(${modelNameL}Manager.create${modelName}(${modelNameL}Create), ${modelName}Info.class);
	}

	/**
	 * <h3>Description</h3>.
	 * <p>Update a ${modelNameL}</p>
	 *
	 * @param id           the ${modelNameL} id
	 * @param ${modelNameL}Update the update object
	 */
	@PUT
	@Path("{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public ${modelName}Info update${modelName}(@PathParam("id") String id, ${modelName}Update ${modelNameL}Update)
	{
		return mapper.map(${modelNameL}Manager.update${modelName}(id, ${modelNameL}Update), ${modelName}Info.class);
	}

	/**
	 * <h3>Description</h3>.
	 * <p>Delete a ${modelNameL}</p>
	 *
	 * @param id the ${modelNameL} id
	 */
	@DELETE
	@Path("{id}")
	public void delete${modelName}(@PathParam("id") String id)
	{
		${modelNameL}Manager.delete${modelName}(id);
	}

	/**
	 * <h3>Description</h3>.
	 * <p>Search ${modelNameL}s, with paginated results.</p>
	 *
	 * @param name the ${modelNameL} name
	 * @param page the page
	 * @param size the page size
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public PaginatedAPIResult<${modelName}Info> find${modelName}s(@QueryParam("name") String name,
													  @QueryParam("page") @DefaultValue("1") int page,
													  @QueryParam("size") @DefaultValue("10") int size)
	{
		return new PaginatedAPIResult<>(mapper.mapAsList(${modelNameL}Manager.find${modelName}s(name, page, size), ${modelName}Info.class), page * size, size);
	}
}
