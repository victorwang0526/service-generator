<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="${pkg}.dao.${modelName}Dao" >
    <resultMap id="${modelNameL}ResultMapper" type="${modelName}" >

        <#list columns as c>
        <#if c.columnName == 'id'>
        <id column="id" property="id"/>
        <#else>
        <result column="${c.columnName}" property="${c.propertyName}"/>
        </#if>
        </#list>
    </resultMap>
    <sql id="allFields" >
        <#list columns as c>
        ${c.columnName}<#if (c_has_next)>,</#if>
        </#list>
    </sql>

    <select id="getAll" resultMap="${modelNameL}ResultMapper">
        SELECT
        <include refid="allFields" />
        FROM ${tableName}
        ORDER BY created_at
    </select>

    <select id="getCount" parameterType="java.util.HashMap" resultType="int">
        SELECT COUNT(*) as cnt
        FROM ${tableName}
        WHERE 1=1
        <include refid="find${modelName}sParams"/>
    </select>

    <select id="get" resultMap="${modelNameL}ResultMapper" parameterType="String" >
        select
        <include refid="allFields" />
        from ${tableName}
        where id = ${r"#{id}"}
    </select>

    <insert id="insert" parameterType="${modelName}" >
        insert into ${tableName} (
        <#list columns as c>
        ${c.columnName}<#if (c_has_next)>,</#if>
        </#list>
        )
        values (
        <#list columns as c>
        ${r"#{"}${c.propertyName}${r"}"}<#if (c_has_next)>,</#if>
        </#list>
        )
    </insert>

    <update id="update" parameterType="${modelName}" >
        update ${tableName}
        SET
        <#list columns as c>
        <#if c.columnName != "id">
        ${c.columnName} = ${r"#{"}${c.propertyName}${r"}"}<#if (c_has_next)>,</#if>
        </#if>
        </#list>
        where id = ${r"#{id}"}
    </update>

    <sql id="find${modelName}sParams">

    </sql>

    <select id="getList" parameterType="java.util.HashMap" resultMap="${modelNameL}ResultMapper">
        SELECT
        <include refid="allFields" />
        FROM ${tableName}
        WHERE 1=1
        <include refid="find${modelName}sParams"/>
        <choose>
            <when test="orderBy != null">
                ORDER BY ${r"${orderBy}"}
            </when>
            <otherwise>
                ORDER BY created_at
            </otherwise>
        </choose>
        <if test="limit != null and offset != null">
            LIMIT ${r"#{limit}"} OFFSET ${r"#{offset}"}
        </if>
    </select>

    <delete id="purge">
        DELETE FROM ${tableName}
    </delete>

    <delete id="delete" parameterType="String">
        DELETE FROM ${tableName}
        WHERE id = ${r"#{id}"}
    </delete>
</mapper>